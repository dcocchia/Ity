"use strict";(function (window) { const Ity = { version: "1.0.0" }; const regexps = { rclass: /[\t\r\n\f]/g, rnotwhite: /\S/, nospaces: /^\S*$/ }; class SelectorObject { constructor(nodeList = []) { this.isSelectorObject = true; this.nodes = []; this.nodes = Array.from(nodeList); this.nodes.forEach((n, i) => (this[i] = n)); } get length() { return this.nodes.length; } [Symbol.iterator]() { return this.nodes[Symbol.iterator](); } find(selector) { const nodeList = []; for (const node of this.nodes) { const list = node.querySelectorAll(selector); for (const thisNode of Array.from(list)) { const elm = thisNode; if (nodeList.indexOf(elm) < 0) { nodeList.push(elm); } } } return new SelectorObject(nodeList); } filter(selector) { const nodeList = []; for (const node of this.nodes) { if (node.matches(selector)) { nodeList.push(node); } } return new SelectorObject(nodeList); } first() { return new SelectorObject(this[0] ? [this[0]] : []); } last() { return new SelectorObject(this.length ? [this[this.length - 1]] : []); } parent() { const nodeList = []; for (const node of this.nodes) { const parent = node.parentElement; if (parent && nodeList.indexOf(parent) < 0) { nodeList.push(parent); } } return new SelectorObject(nodeList); } children(selector) { const nodeList = []; for (const node of this.nodes) { const children = Array.from(node.children); for (const child of children) { if (nodeList.indexOf(child) < 0 && (!selector || child.matches(selector))) { nodeList.push(child); } } } return new SelectorObject(nodeList); } remove() { for (const node of this.nodes) { if (node.parentElement) { node.parentElement.removeChild(node); } } return new SelectorObject([]); } addClass(...classes) { for (const node of this.nodes) { node.classList.add(...classes); } return this; } removeClass(value) { if (value && regexps.nospaces.test(value)) { for (const node of this.nodes) { if (node.classList.contains(value)) { node.classList.remove(value); } } } return this; } toggleClass(value) { if (value && regexps.nospaces.test(value)) { for (const node of this.nodes) { node.classList.toggle(value); } } return this; } hasClass(value) { if (!(value && regexps.nospaces.test(value))) return false; for (const node of this.nodes) { if (node.classList.contains(value)) { return true; } } return false; } before(content) { return this._html(content, 'beforebegin'); } after(content) { return this._html(content, 'afterend'); } append(content) { return this._html(content, 'beforeend'); } prepend(content) { return this._html(content, 'afterbegin'); } html(content) { return this._html(content, 'replace'); } _html(content, position) { var _a; const isSelectorObject = content.isSelectorObject === true; for (const node of this.nodes) { if (!isSelectorObject) { const html = (_a = content.outerHTML) !== null && _a !== void 0 ? _a : String(content); if (position !== 'replace') { node.insertAdjacentHTML(position, html); } else { node.innerHTML = html; } } else { for (const selNode of content) { const html = selNode.outerHTML; if (position !== 'replace') { node.insertAdjacentHTML(position, html); } else { node.innerHTML = html; } } } } return this; } } function onDOMReady(fn, args = [], context = Ity) { const func = () => fn.apply(context, args); if (document.readyState !== 'loading') { func(); } else { document.addEventListener('DOMContentLoaded', func); } } class Model { constructor(opts = {}) { this.onDOMReady = onDOMReady; Object.assign(this, opts); this.id || (this.id = `m${Math.floor(Math.random() * 100000) + 1}`); this._events || (this._events = {}); this.data || (this.data = {}); this.url || (this.url = ""); this._init(opts); } _init(opts) { this.initialize(opts); } _ajax(opts = {}) { const model = this; const request = new XMLHttpRequest(); opts.url || (opts.url = this.url); opts.type || (opts.type = 'GET'); opts.success || (opts.success = function (resp) { this.data = resp; }); opts.error || (opts.error = function () { }); request.open(opts.type, opts.url, true); request.onload = function () { if (request.status >= 200 && request.status < 400) { const resp = JSON.parse(request.responseText); opts.success.call(model, resp); } else { opts.error.call(model, request.status); } }; request.onerror = function () { opts.error.call(model); }; request.send(); } initialize(options) { } get(attr) { if (!attr) return this.data; return this.data ? this.data[attr] : undefined; } set(attr, value) { if (typeof attr === "string") { this.data[attr] = value; } else if (typeof attr === "object") { this.data = attr; } this.trigger("change", this.data); } unSet(attr) { if (this.data && this.data[attr] !== undefined) { delete this.data[attr]; this.trigger("change", this.data); } } clear() { this.data = {}; this.trigger("change", this.data); } on(evtName, callback, context = this) { this._events[evtName] = { callback, ctx: context }; } sync(opts) { this._ajax(opts); } trigger(evtName, data) { const evt = this._events[evtName]; if (evt) { evt.callback.call(evt.ctx, data); } } } class View { constructor(opts = {}) { Object.assign(this, opts); this.id || (this.id = `v${Math.floor(Math.random() * 100000) + 1}`); if (this.app) this.app.addView(this); this._events || (this._events = {}); this.events || (this.events = {}); onDOMReady(this._init, [opts], this); } _setElement(elSelector) { if (elSelector === null || elSelector === void 0 ? void 0 : elSelector.isSelectorObject) { this.el = elSelector; } else if (elSelector instanceof NodeList) { this.el = new SelectorObject(elSelector); } else if (typeof elSelector === "string") { this.el = new SelectorObject(window.document.querySelectorAll(elSelector)); } else if (elSelector instanceof HTMLElement) { this.el = new SelectorObject([elSelector]); } else { throw new Error("el selector must be of type String, NodeList, HTMLElement or Ity.SelectorObject"); } } _bindDOMEvents(evtObj) { if (!this.el || !this.el.isSelectorObject) return; for (const selector in evtObj) { for (const evt in evtObj[selector]) { this._delegateEvent(selector, evt, this[evtObj[selector][evt]]); } } } _delegateEvent(selector, evtName, callback) { for (const root of this.el) { root.addEventListener(evtName, (e) => { let node = e.target; while (node) { if (node.matches && node.matches(selector)) { callback.call(this, e); break; } if (node === root) break; node = node.parentElement; } }); } } _init(opts) { if (this.el) this._setElement(this.el); this._bindDOMEvents(this.events); this.initialize(opts); } initialize(opts) { } getName() { return this.name; } get(attr) { return this[attr]; } set(attr, value) { this[attr] = value; } on(evtName, callback, context = this) { this._events[evtName] = { callback, ctx: context }; } remove() { this.el.remove(); if (this.app) this.app.removeView(this.id); } trigger(evtName, data) { const evt = this._events[evtName]; if (evt) evt.callback.call(evt.ctx, data); } select(selector, ctx = this.el) { if (ctx instanceof HTMLElement || ctx instanceof HTMLDocument) { return new SelectorObject(ctx.querySelectorAll(selector)); } else if (ctx.isSelectorObject) { return ctx.find(selector); } throw new Error('Context passed to .select() must be an HTMLElement or an Ity.SelectorObject'); } } class Application { constructor() { this.views = []; } getView(id) { for (const view of this.views) { if (view.id === id) return view; } return undefined; } addView(view) { if (view instanceof View) this.views.push(view); } removeView(id) { for (let i = 0; i < this.views.length; i++) { if (this.views[i].id === id) { this.views.splice(i, 1); } } } trigger(evtName, data) { for (const view of this.views) { view.trigger(evtName, data); } } } class Router { constructor() { this.routes = []; this.listener = this._checkUrl.bind(this); this.start(); } addRoute(pattern, handler) { const keys = []; const re = new RegExp("^" + pattern .replace(/\/?$/, "") .replace(/:[^/]+/g, (m) => { keys.push(m.slice(1)); return "([^/]+)"; }) + "/?$"); this.routes.push({ re, keys, handler }); } navigate(path) { window.history.pushState(null, "", path); this._checkUrl(); } start() { window.addEventListener("popstate", this.listener); this._checkUrl(); } stop() { window.removeEventListener("popstate", this.listener); } _checkUrl() { const path = window.location.pathname.replace(/\/?$/, ""); for (const route of this.routes) { const match = route.re.exec(path); if (match) { const params = {}; route.keys.forEach((k, i) => (params[k] = match[i + 1])); route.handler(params); break; } } } } Ity.SelectorObject = SelectorObject; Ity.onDOMReady = onDOMReady; Ity.Model = Model; Ity.View = View; Ity.Application = Application; Ity.Router = Router; if (typeof define === 'function' && define.amd) { define(function () { window.Ity = Ity; return Ity; }); } else { window.Ity = Ity; }})(window);
